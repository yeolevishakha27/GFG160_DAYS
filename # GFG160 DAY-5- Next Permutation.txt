# GFG160 DAY-5:-Next Permutation

// User function Template for Java
class Solution {
    static void nextPermutation(int[] nums) {
        int piv = -1;
        int n = nums.length;

        
        for (int i = n - 2; i >= 0; i--) {
            if (nums[i] < nums[i + 1]) {
                piv = i;
                break;
            }
        }

    
        if (piv == -1) {
            reverse(nums, 0, n - 1);
            return;
        }

        for (int i = n - 1; i > piv; i--) {
            if (nums[i] > nums[piv]) {
                swap(nums, i, piv);
                break;
            }
        }

        // Reverse the right part
        reverse(nums, piv + 1, n - 1);
    }

    public static void reverse(int[] nums, int start, int end) {
        while (start < end) {
            int temp = nums[start];
            nums[start] = nums[end];
            nums[end] = temp;
            start++;
            end--;
        }
    }

    public static void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    // public static void main(String[] args) {
    //     Scanner sc = new Scanner(System.in);
    //     int a = sc.nextInt();  // Read the size of the array
    //     int[] nums = new int[a];

    //     // Read the elements of the array
    //     for (int i = 0; i < a; i++) {
    //         nums[i] = sc.nextInt();
    //     }

    //     nextPermutation(nums);  // Call the nextPermutation method

    //     // Print the resulting array
    //     for (int i = 0; i < nums.length; i++) {
    //         System.out.print(nums[i] + " ");  // Print all elements on the same line
    //     }
    // }
}


