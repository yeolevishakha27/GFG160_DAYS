#GFG160-Day-12-Max Circular Subarray Sum

class Solution {

    // Function to find maximum circular subarray sum
    public int circularSubarraySum(int arr[]) {
        int n = arr.length;

        // Step 1: Find the maximum subarray sum using Kadane's Algorithm
        int maxKadane = kadane(arr);

        // Step 2: Find the minimum subarray sum
        int totalSum = 0;
        for (int i = 0; i < n; i++) {
            totalSum += arr[i];
            arr[i] = -arr[i]; // Invert the array to find min subarray sum using Kadane
        }
        int minKadane = kadane(arr);
        minKadane = -minKadane; // Restore the min subarray sum

        // Step 3: Handle the circular case
        if (totalSum == minKadane) {
            // All elements are negative, return maxKadane
            return maxKadane;
        }

        // Maximum of non-circular and circular sums
        return Math.max(maxKadane, totalSum - minKadane);
    }

    // Helper function: Kadane's Algorithm to find maximum subarray sum
    private int kadane(int[] arr) {
        int maxSoFar = arr[0], maxEndingHere = arr[0];
        for (int i = 1; i < arr.length; i++) {
            maxEndingHere = Math.max(arr[i], maxEndingHere + arr[i]);
            maxSoFar = Math.max(maxSoFar, maxEndingHere);
        }
        return maxSoFar;
    }
}

